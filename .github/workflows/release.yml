name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.8)'
        required: true
        default: 'v0.1.8'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Windows
        run: npm run make

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            out/make/squirrel.windows/x64/*.exe
            out/make/squirrel.windows/x64/*.nupkg
            out/make/squirrel.windows/x64/RELEASES

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build macOS x64
        run: npm run make -- --platform=darwin --arch=x64

      - name: Build macOS ARM64
        run: npm run make -- --platform=darwin --arch=arm64

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: out/make/*.dmg

  release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./windows-build

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: ./macos-build

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "version_number=${{ github.event.inputs.version }}" | sed 's/v//' >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "version_number=${GITHUB_REF#refs/tags/}" | sed 's/v//' >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Buddy Desktop ${{ steps.get_version.outputs.version }}
          body: |
            ## Buddy Desktop ${{ steps.get_version.outputs.version }}

            ### Downloads
            - **Windows**: Download `buddy-setup.exe` for Windows 10/11 (x64)
            - **macOS Intel**: Download `buddy-mac-x64.dmg` for Intel Macs
            - **macOS Apple Silicon**: Download `buddy-mac-arm64.dmg` for M1/M2/M3 Macs

            ### Installation
            - **Windows**: Run the setup.exe file and follow the installation wizard
            - **macOS**: Open the .dmg file and drag Buddy to Applications folder

            ### What's New
            - Bug fixes and improvements
            - Enhanced performance

            ---
            *This release contains compiled binaries only. Source code is protected.*
          draft: false
          prerelease: false

      - name: Upload Windows Setup
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-build/buddy-${{ steps.get_version.outputs.version_number }} Setup.exe
          asset_name: buddy-setup.exe
          asset_content_type: application/octet-stream

      - name: List macOS files
        run: |
          echo "Listing macOS build files:"
          find ./macos-build -type f -name "*.dmg" -exec basename {} \;

      - name: Upload macOS Intel DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-build/buddy-${{ steps.get_version.outputs.version_number }}-x64.dmg
          asset_name: buddy-mac-x64.dmg
          asset_content_type: application/octet-stream

      - name: Upload macOS ARM64 DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-build/buddy-${{ steps.get_version.outputs.version_number }}-arm64.dmg
          asset_name: buddy-mac-arm64.dmg
          asset_content_type: application/octet-stream
